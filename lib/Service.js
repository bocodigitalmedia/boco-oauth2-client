// Generated by CoffeeScript 1.6.3
(function() {
  var Client, OAuth2ClientService;

  Client = require('./Client');

  OAuth2ClientService = (function() {
    function OAuth2ClientService(props) {
      if (props == null) {
        props = {};
      }
      this.clientRepository = props.clientRepository;
    }

    OAuth2ClientService.prototype.registerClient = function(params, callback) {
      var client;
      if (params == null) {
        params = {};
      }
      client = new Client({
        id: params.clientId,
        name: params.name,
        type: params.type,
        profile: params.profile
      });
      return this.clientRepository.store(client, function(error, client) {
        if (error != null) {
          return callback(error);
        }
        return callback(null, client);
      });
    };

    OAuth2ClientService.prototype.findClient = function(params, callback) {
      if (params == null) {
        params = {};
      }
      return this.clientRepository.find(params.clientId, function(error, client) {
        if (error != null) {
          return callback(error);
        }
        return callback(null, client);
      });
    };

    OAuth2ClientService.prototype.authorizeGrantType = function(params, callback) {
      var client, repository;
      if (params == null) {
        params = {};
      }
      repository = this.clientRepository;
      return client = repository.find(params.clientId, function(error, client) {
        if (error != null) {
          return callback(error);
        }
        client.authorizeGrantType(params.grantType);
        return repository.store(client, function(error, client) {
          if (error != null) {
            return callback(error);
          }
          return callback(null, client);
        });
      });
    };

    return OAuth2ClientService;

  })();

  module.exports = OAuth2ClientService;

}).call(this);

/*
//@ sourceMappingURL=Service.map
*/
