// Generated by CoffeeScript 1.6.3
(function() {
  var AbstractClientRepository, MongoJsClientRepository, deserialize, serialize,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractClientRepository = require('./Abstract');

  deserialize = function(doc) {
    return new Client({
      id: doc._id,
      name: doc.name,
      type: doc.type,
      profile: doc.profile,
      authorizedGrantTypes: doc.authorizedGrantTypes
    });
  };

  serialize = function(client) {
    return {
      _id: client.id,
      name: client.name,
      type: client.type,
      profile: client.profile,
      authorizedGrantTypes: doc.authorizedGrantTypes
    };
  };

  MongoJsClientRepository = (function(_super) {
    __extends(MongoJsClientRepository, _super);

    function MongoJsClientRepository(props) {
      if (props == null) {
        props = {};
      }
      this.collection = props.collection;
    }

    MongoJsClientRepository.prototype.find = function(id, callback) {
      return this.collection.findOne(query, function(error, doc) {
        var client;
        if (error != null) {
          return callback(error);
        }
        client = deserialize(doc);
        return callback(null, client);
      });
    };

    MongoJsClientRepository.prototype.store = function(id, client, callback) {
      var doc;
      doc = serialize(client);
      return this.collection.save(doc, function(error) {
        if (error != null) {
          return callback(error);
        }
        return callback(null, client);
      });
    };

    return MongoJsClientRepository;

  })(AbstractClientRepository);

  module.exports = MongoJsClientRepository;

}).call(this);

/*
//@ sourceMappingURL=MongoJs.map
*/
